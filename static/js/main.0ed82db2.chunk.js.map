{"version":3,"sources":["Components/redux/actionCreators.js","Components/Word.js","Components/Form.js","Components/Filter.js","Components/List.js","Components/redux/reducer.js","Components/redux/words.reducer.js","Components/redux/shouldShowForm.reducer.js","Components/redux/filterMode.reducer.js","Components/redux/store.js","App.js","serviceWorker.js","index.js"],"names":["URL","toggleForm","type","setFilterMode","filterMode","getAllWords","dispatch","axios","get","then","response","words","data","removeWord","_id","delete","addWord","en","vn","post","res","_res$data","success","word","message","alert","toggleWord","isMemorized","put","Word","_this","this","props","react_default","a","createElement","className","onClick","Component","connect","actionCreators","Form","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","txtEn","txtVn","bind","assertThisInitialized","_this$state","setState","_this2","shouldShowForm","placeholder","value","onChange","evt","target","style","width","margin","Filter","_this$props","List","Components_Form","Components_Filter","filter","w","map","Components_Word","key","reducer","combineReducers","arguments","length","undefined","action","concat","objectSpread","store","createStore","applyMiddleware","thunk","App","es","Components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ed82db2.chunk.js","sourcesContent":["import axios from 'axios';\nconst URL =\"https://serverthaomap.herokuapp.com/word/\"\nexport function toggleForm(){\n    return {type : 'TOGGLE_FORM'}\n}\nexport function setFilterMode(filterMode){\n    return { type : 'SET_FILTER_MODE' , filterMode}\n}\n\n\nexport function getAllWords(){\n    return function(dispatch){\n       \n        axios.get(URL)\n        .then(response => dispatch({type : 'SET_WORDS' , words : response.data.words}));\n    }\n}\nexport function removeWord(_id){\n    return function(dispatch){\n\n        axios.delete(URL+_id)\n        .then(() => dispatch({type : 'REMOVE_WORD' , _id}));\n    }\n}\nexport function addWord(en , vn){\n    return function(dispatch){\n\n        axios.post(URL , { en,vn })\n        .then(res => {\n            const { success , word , message} = res.data;\n            if(!success) return alert(message);\n            dispatch({type : 'ADD_WORD' , word});           \n        });\n        \n    }\n}\nexport function toggleWord(_id , isMemorized){\n    return function(dispatch){\n\n        axios.put(URL+_id , {isMemorized})\n        .then(res => dispatch({type : 'TOGGLE_WORD' , _id}));\n    }\n}","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport * as actionCreators from './redux/actionCreators';\nclass Word extends Component {\n    render() {\n        const {word } = this.props;\n        return (\n            <div className=\"word\">\n                <div className=\"word-container\">\n                    <h3 className=\"text-success\">{word.en}</h3>\n                    <h3 className=\"text-danger\">\n                        {word.isMemorized ? '----' : word.vn}\n                    </h3>\n                </div>\n                <div className=\"btn-container\">\n                    <button\n                        className={word.isMemorized ? 'btn btn-success' : 'btn btn-danger'}\n                        onClick={() => this.props.toggleWord(word._id , !word.isMemorized)}>\n                        {word.isMemorized ? 'Forgot' : 'Memorized'}\n                    </button>\n                    <button\n                        className=\"btn btn-warning\"\n                        onClick={() => this.props.removeWord(word._id)}>\n                        Remove\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\n// connect(thamsoa , thamsob)\n// > thamsoa = \n    // +Gia tri o trong store muon hien thi len cho Components phai co kieu la object\n    // + Lay gia tri tham so a = this.props.tenthuoctinhthamsoa\n// > thamsob =\n    // + Phuong thuc da duoc dispatch de xu ly logic cho du lieu\n    // + Lay gia tri tham so b = this.props.tenphuongthucxuly\nexport default connect(null,actionCreators)(Word);","import React, { Component } from 'react'\nimport {connect } from 'react-redux';\nimport * as actionCreators from './redux/actionCreators';\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            txtEn : '',\n            txtVn : '',\n        }\n        this.addWord = this.addWord.bind(this);    \n    }\n   addWord(){\n    const { txtEn , txtVn} = this.state;\n    this.props.addWord(txtEn , txtVn);\n    this.setState({txtEn : '' , txtVn : ''})\n       \n    }\n    render() {\n        const { shouldShowForm  } = this.props;\n        return (\n            <div>\n                {shouldShowForm ? \n                    <div className=\"form-group word-from\" >\n                        <input\n                            placeholder=\"English\"\n                            className=\"form-control\"\n                            value={this.state.txtEn}\n                            onChange={evt => this.setState({txtEn : evt.target.value})}/>\n                        <br />\n                        <input\n                            placeholder=\"Vietnamese\"\n                            className=\"form-control\"\n                            value={this.state.txtVn}\n                            onChange={evt => this.setState({txtVn : evt.target.value})}/>\n                        <br />\n                        <div className=\"btn-container\">\n                            <button \n                                className=\"btn btn-success\"\n                                onClick={this.addWord}>\n                                Add word\n                            </button>\n                            <button\n                                className=\"btn btn-danger\"\n                                onClick={this.props.toggleForm}>\n                                Cancel\n                            </button>\n                        </div>\n                    </div> :\n                     <button \n                     className=\"btn btn-success\"\n                     style={{width : 200 ,margin : 10}}\n                     onClick={this.props.toggleForm}>\n                             +\n                    </button>\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = function(state){\n    return {shouldShowForm : state.shouldShowForm};\n}\n\nexport default connect(mapStateToProps , actionCreators)(Form);","import React, { Component } from 'react'\nimport {connect} from 'react-redux';\nimport * as actionCreators from './redux/actionCreators';\nclass Filter extends Component {\n\n    render() {\n        const { filterMode , setFilterMode} = this.props;\n        return (\n            <div>\n                <select\n                    className=\"word\"\n                    value={filterMode}\n                    onChange={evt => setFilterMode(evt.target.value)}>\n                    <option value=\"Show_All\">Show All</option>\n                    <option value=\"Show_Memorized\">Show Memoried</option>\n                    <option value=\"Show_Forgot\">Show Forgot</option>\n                </select>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = function(state){\n    return {filterMode : state.filterMode}\n}\nexport default connect(mapStateToProps , actionCreators)(Filter);","import React, { Component } from 'react'\nimport Word from './Word';\nimport Form from './Form';\nimport Filter from './Filter';\nimport {connect} from 'react-redux';\nimport * as actionCreators from './redux/actionCreators';\n\nclass List extends Component {\n  componentWillMount(){\n    this.props.getAllWords();\n  }\n  render() {\n    const { words , filterMode} = this.props;\n    return (\n      <div>\n        <Form />\n        <br/>\n        <Filter />\n        {words.filter(w => {\n          if(filterMode === 'Show_Forgot' && w.isMemorized) return false;\n          if(filterMode === 'Show_Memorized' && !w.isMemorized) return false;\n          return true;\n        }).map(word => \n          <Word \n            key={word._id} \n            word={word}/>)}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = function(state){\n   return {words : state.words , filterMode : state.filterMode}\n}\n\nexport default connect(mapStateToProps,actionCreators)(List);","import { combineReducers } from 'redux';\nimport { filterModeReducer } from './filterMode.reducer';\nimport { wordReducer } from './words.reducer';\nimport { shouldShowFormReducer } from './shouldShowForm.reducer';\n\n\n\nexport const reducer = combineReducers({\n    words: wordReducer,\n    shouldShowForm: shouldShowFormReducer,\n    filterMode: filterModeReducer\n})","export function wordReducer(state = [], action) {\n    if (action.type === \"SET_WORDS\") return state.concat(action.words);\n    if (action.type === 'REMOVE_WORD') {\n        const words = state.filter(w => w._id !== action._id)\n        return words;\n    }\n    if (action.type === 'ADD_WORD') {\n        const words = state.concat(action.word);\n        return words;\n    }\n    if (action.type === 'TOGGLE_WORD') {\n        const words = state.map(w => {\n            if (action._id === w._id) return { ...w, isMemorized: !w.isMemorized }\n            return w;\n        })\n        return words;\n    }\n    return state;\n}","export function shouldShowFormReducer(state = false, action) {\n    if (action.type === 'TOGGLE_FORM') return !state;\n    if (action.type === 'ADD_WORD') return false;\n    return state;\n}","export function filterModeReducer(state = false, action) {\n    if (action.type === 'SET_FILTER_MODE') return action.filterMode\n    return state;\n}","import { createStore , applyMiddleware  } from 'redux';\nimport thunk from 'redux-thunk';\nimport {reducer} from './reducer';\n\nexport const store = createStore(reducer , applyMiddleware(thunk));","import React, { Component } from 'react';\nimport './App.css';\nimport List from './Components/List';\nimport {store} from './Components/redux/store';\nimport { Provider } from 'react-redux';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        {/* <List/> */}\n        {/* <Box/> */}\n        {/* <Form/> */}\n        <Provider store={store}>\n          <List />\n        </Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// Auto Close Tag formulahendry.auto-close-tag\n// Auto Rename Tag\n// npm Intellisense\n// path Intellisense\n// es7 react/redux\n// vscode-icons\n\n//Redux\n// Dinh nghia ra store\n// Ket noi store voi components\n// Hien thi store ra components\n// Thay doi store tu components","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}